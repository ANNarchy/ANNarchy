<database>
  <neurons>
    <LeakyNeuron>
      <name>LeakyNeuron</name>
      <code>
        <line0>LeakyNeuron = RateNeuron(</line0>
        <line1>    parameters=""" </line1>
        <line2>        tau = 10.0 : population</line2>
        <line3>        baseline = 0.0 </line3>
        <line4>    """,</line4>
        <line5>    equations="""</line5>
        <line6>        tau * drate/dt + rate = sum(exc) - sum(inh) : min=0.0</line6>
        <line7>    """</line7>
        <line8>)</line8>
      </code>
    </LeakyNeuron>
    <InputNeuron>
      <name>InputNeuron</name>
      <code>
        <line0>InputNeuron = RateNeuron(</line0>
        <line1>    parameters=""" </line1>
        <line2>        tau = 10.0 : population</line2>
        <line3>        baseline = 0.0 </line3>
        <line4>    """,</line4>
        <line5>    equations="""</line5>
        <line6>        tau * drate/dt + rate = baseline : min=0.0</line6>
        <line7>    """</line7>
        <line8>)</line8>
      </code>
    </InputNeuron>
  </neurons>
  <synapses>
    <AntiHebb>
      <name>AntiHebb</name>
      <code>
        <line0>AntiHebb = RateSynapse(</line0>
        <line1>    parameters=""" </line1>
        <line2>        tau = 2000 : postsynaptic</line2>
        <line3>        alpha = 0.3 : postsynaptic</line3>
        <line4>    """,</line4>
        <line5>    equations="""</line5>
        <line6>        tau * dvalue/dt = pre.rate * post.rate - alpha * post.rate^2 * value : min = 0.0</line6>
        <line7>    """</line7>
        <line8>)  </line8>
      </code>
    </AntiHebb>
    <Oja>
      <name>Oja</name>
      <code>
        <line0>Oja = RateSynapse(</line0>
        <line1>    parameters=""" </line1>
        <line2>        tau = 2000 : postsynaptic</line2>
        <line3>        alpha = 8.0 : postsynaptic</line3>
        <line4>    """,</line4>
        <line5>    equations="""</line5>
        <line6>        tau * dvalue/dt = pre.rate * post.rate - alpha * post.rate^2 * value</line6>
        <line7>    """</line7>
        <line8>)  </line8>
      </code>
    </Oja>
  </synapses>
  <networks>
    <Bar_Learning>
      <name>Bar_Learning</name>
      <populations>
        <pop0>
          <name>Input</name>
          <type>InputNeuron</type>
          <geometry>(16, 16)</geometry>
          <coords>
            <p1>[ 0.271971496437, 0.608527131783 ]</p1>
            <p2>[ 0.469121140143, 0.608527131783 ]</p2>
            <p3>[ 0.469121140143, 0.395348837209 ]</p3>
            <p4>[ 0.271971496437, 0.395348837209 ]</p4>
          </coords>
        </pop0>
        <pop1>
          <name>Output</name>
          <type>LeakyNeuron</type>
          <geometry>(16, 4)</geometry>
          <coords>
            <p1>[ 0.622327790974, 0.610465116279 ]</p1>
            <p2>[ 0.813539192399, 0.610465116279 ]</p2>
            <p3>[ 0.813539192399, 0.383720930233 ]</p3>
            <p4>[ 0.622327790974, 0.383720930233 ]</p4>
          </coords>
        </pop1>
      </populations>
      <projections>
        <proj0>
          <pre>0</pre>
          <post>1</post>
          <target>None</target>
        </proj0>
      </projections>
    </Bar_Learning>
  </networks>
  <environments>
    <BarLearningSim>
      <name>BarLearningSim</name>
      <code>
        <line0># Definition of the environment</line0>
        <line1>def set_input():</line1>
        <line2>    # Choose which bars will be used as inputs</line2>
        <line3>    values = np.zeros((nb_neurons, nb_neurons))</line3>
        <line4>    for w in range(nb_neurons):</line4>
        <line5>        if np.random.random() &lt; 1./ float(nb_neurons):</line5>
        <line6>            values[:, w] = 1.</line6>
        <line7>    for h in range(nb_neurons):</line7>
        <line8>        if np.random.random() &lt; 1./ float(nb_neurons):</line8>
        <line9>            values[h, :] = 1.</line9>
        <line10>    # Set the input</line10>
        <line11>    input_pop.baseline = values.reshape(nb_neurons**2)</line11>
        <line12># visualization meanwhile yes/no</line12>
        <line13>vis_during_sim=True</line13>
        <line14>def simulate_sth():</line14>
        <line15>    # Collect visualizing information</line15>
        <line16>    plot1 = {'pop': input_pop, 'var': 'rate'}</line16>
        <line17>    plot2 = {'pop': feature_pop, 'var': 'rate'}</line17>
        <line18>    plot3 = {'proj': input_feature, 'var': 'value', </line18>
        <line19>         'max': 0.1, 'title': 'Receptive fields'}</line19>
        <line20>  </line20>
        <line21>    vis = Visualization( [plot1, plot2, plot3])</line21>
        <line22>     </line22>
        <line23>    save('init.mat')</line23>
        <line24>    #Run the simulation        </line24>
        <line25>    for trial in range(1):</line25>
        <line26>        if (trial &gt; 0) and (trial % 100==0):</line26>
        <line27>            print trial</line27>
        <line28>        set_input()</line28>
        <line29>        simulate(1) </line29>
        <line30> </line30>
        <line31>        vis.render()</line31>
        <line32> </line32>
        <line33>    # Visualize the result of learning</line33>
        <line34>    vis.render()  </line34>
        <line35>    print 'simulation finished.'</line35>
        <line36>        </line36>
        <line37>if __name__=='__main__':</line37>
        <line38>    simulate_sth()</line38>
      </code>
    </BarLearningSim>
  </environments>
</database>
