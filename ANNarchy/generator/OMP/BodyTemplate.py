body_template = '''
#include "ANNarchy.h"
%(prof_include)s

/*
 * Internal data
 *
 */
double dt;
long int t;
std::mt19937  rng;
std::vector<PopulationRecorder*> recorders;

// Populations
%(pop_ptr)s

// Projections
%(proj_ptr)s

// Global operations
%(glops_def)s

// Recorders 
void addRecorder(PopulationRecorder* recorder){
    recorders.push_back(recorder);
}

// Simulate the network for the given number of steps
void run(int nbSteps) {
%(prof_run_pre)s
    for(int i=0; i<nbSteps; i++) {
        step();
    }
%(prof_run_post)s

}

int run_until(int steps, std::vector<int> populations, bool or_and)
{

%(run_until)s

}

// Initialize the internal data and random numbers generators
void initialize(double _dt, long int seed) {

%(prof_init)s

    // Internal variables
    dt = _dt;
    t = (long int)(0);

    // Random number generators
    if(seed==-1){
        rng = std::mt19937(time(NULL));
    }
    else{
        rng = std::mt19937(seed);
    }
    
%(random_dist_init)s
%(pop_init)s
%(projection_init)s
%(globalops_init)s
}

// Step method. Generated by ANNarchy.
void step()
{
%(prof_step_pre)s

    double sum;
    int rk_pre, rk_post, i, j, rk_j, nb_post;
    
    ////////////////////////////////
    // Presynaptic events
    ////////////////////////////////
%(reset_sums)s
%(compute_sums)s

    ////////////////////////////////
    // Update random distributions
    ////////////////////////////////
%(random_dist_update)s

    ////////////////////////////////
    // Update neural variables
    ////////////////////////////////
%(update_neuron)s

    ////////////////////////////////
    // Delay outputs
    ////////////////////////////////
%(delay_code)s

    ////////////////////////////////
    // Global operations (min/max/mean)
    ////////////////////////////////
%(update_globalops)s


    ////////////////////////////////
    // Update synaptic variables
    ////////////////////////////////
%(update_synapse)s    


    ////////////////////////////////
    // Postsynaptic events
    ////////////////////////////////
%(post_event)s

    ////////////////////////////////
    // Structural plasticity
    ////////////////////////////////
%(structural_plasticity)s

    ////////////////////////////////
    // Recording
    ////////////////////////////////
    for(int i=0; i < recorders.size(); i++){
        recorders[i]->record();
    }

    ////////////////////////////////
    // Increase internal time
    ////////////////////////////////
    t++;
}


/*
 * Access to time and dt
 *
*/
long int getTime() {return t;}
void setTime(long int t_) { t=t_;}
double getDt() { return dt;}
void setDt(double dt_) { dt=dt_;}

/*
 * Number of threads
 *
*/
void setNumberThreads(int threads)
{
    %(set_number_threads)s
}
'''